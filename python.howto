################################################################################
#
# Index
#
# 1) Help: available methods for a data type: dir, help
# 2) Built.in data structures
# 3) Writing Scripts
# Annex) python in Emacs
#        - python-mode
#        - run-python
#
# References )
#
################################################################################


################################################################################
## 1) Help: available methods for a data type: dir, help
################################################################################

>>> mystring='this is my string';
>>> dir(mystring);       #show all string methods
>>> help(mystring.join)  #show detail of a method


################################################################################
## 2) Built.in data structures [2.1]
################################################################################

# -----------------
# <type 'list'>: store a sequence of MUTABLE (non-const)
# -----------------
#
# - WARNING: fixed ordering
# - WARNING: allows NESTING (list of lists)
# - WARNING: allows MIXED data type content
#
# operators:
# |+|  concatenation
# 
# Indexing
# [0..n-1] 
# [1]  positive indexing: watch value; value substitution
# [-1] negative indexing (inverse order):  watch value; value substitution
# [from_index:to_index]| will get the elements in |from_index, ..., to_index-1|
# [from_index:], [:to_index]
# len(fruits): number of elements
>>> fruits = ['apple','orange','pear','banana']

# The items stored in lists can be any Python data type. So for instance
# we can have lists of lists:
>>> lstOfLsts = [['a','b','c'],[1,2,3],['one','two','three']]
>>> lstOfLsts[1][2]


# -----------------
# <type 'tuple'>: IDEM lists except that it is immutable once it is created
# -----------------

>>> fruits = ('apple','orange','pear','banana')
>>> pair = (3,5)
>>> pair[0]
3
>>> x,y = pair
>>> x
3


# -----------------
# <type 'set'>: UNORDERED collection of UNIQUE elements.
# -----------------
#
# - WARNING: unordered.
# - WARNING: allows NESTING (tuples of tuples, tuples of any Python data type)
# - WARNING: unique data type content (due to tthe constructors)
#
# set() -> new empty set object
# set(iterable) -> new set object # iterable: list, tuple, ...
# operators:
# A + B
# A & B: intersection
# A | B: union
# in  : a in A 
>>> shapes = ['circle','square','triangle','circle']
>>> A = set(shapes)
A
set(['circle', 'square', 'triangle'])
>>> 'square' in A
True


# -----------------
# <type 'dictionarie'>: (key, value)
# -----------------

# - key: immutable type (string, number, or tuple)
# - value: any Python data type
# - WARNING: not fixed ordering (depends on the hashing algorithm)
# - WARNING: allows NESTING (dictionaries of dictionaries)
# - WARNING: allows MIXED data type content

# basic operators: keys(), values(), items()
# construction
>>> studentIds = {'knuth': 42.0, 'turing': 56.0, 'nash': 92.0 }
# getter
>>> studentIds['turing']                   
56.0
# setter
studentIds['turing'] = [56.0, 'fifty-six'] 
>>> print(studentIds)
{'knuth': 21, 'nash': 92.0, 'turing': [56.0, 'fifty-six']}
#nested dictionaries
global_dir={'studentIds': studentIds, 'minids': {'knuth': 42.0, 'turing': 56.0}}




################################################################################
## 2) Built.in data structures [2.1]
################################################################################



################################################################################
# References
################################################################################

[2] Data types

[2.1] https://docs.python.org/2/tutorial/datastructures.html
